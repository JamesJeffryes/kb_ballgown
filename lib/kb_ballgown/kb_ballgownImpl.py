# -*- coding: utf-8 -*-
#BEGIN_HEADER
#END_HEADER


class kb_ballgown:
    '''
    Module Name:
    kb_ballgown

    Module Description:
    A KBase module: kb_ballgown
    '''

    ######## WARNING FOR GEVENT USERS ####### noqa
    # Since asynchronous IO can lead to methods - even the same method -
    # interrupting each other, you must be *very* careful when using global
    # state. A method could easily clobber the state set by another while
    # the latter method is running.
    ######################################### noqa
    VERSION = "0.0.1"
    GIT_URL = "git@github.com:arfathpasha/kb_ballgown.git"
    GIT_COMMIT_HASH = "e474e752b0e9ed39c79dcf2b9746ea0740b7a2c7"

    #BEGIN_CLASS_HEADER
    #END_CLASS_HEADER

    # config contains contents of config file in a hash or None if it couldn't
    # be found
    def __init__(self, config):
        #BEGIN_CONSTRUCTOR
        #END_CONSTRUCTOR
        pass


    def run_ballgown_app(self, ctx, params):
        """
        run_ballgown_app: run Ballgown app
        http://bioconductor.org/packages/release/bioc/html/ballgown.html
        :param params: instance of type "BallgownInput" (required params:
           expressionset_ref: ExpressionSet object reference
           diff_expression_obj_name: RNASeqDifferetialExpression object name
           filtered_expression_matrix_name: name of output object filtered
           expression matrix condition_labels: conditions for expression set
           object alpha_cutoff: q value cutoff fold_change_cutoff: fold
           change cutoff num_threads: number of threads workspace_name: the
           name of the workspace it gets saved to optional params:
           fold_scale_type: one of ["linear", "log2+1", "log10+1"]) ->
           structure: parameter "expressionset_ref" of type "obj_ref" (An
           X/Y/Z style reference), parameter "diff_expression_obj_name" of
           String, parameter "filtered_expression_matrix_name" of String,
           parameter "condition_labels" of list of String, parameter
           "alpha_cutoff" of Double, parameter "fold_change_cutoff" of
           Double, parameter "num_threads" of Long, parameter
           "workspace_name" of String, parameter "fold_scale_type" of String
        :returns: instance of type "BallgownResult" (result_directory: folder
           path that holds all files generated by run_ballgown_app
           diff_expression_obj_ref: generated RNASeqDifferetialExpression
           object reference filtered_expression_matrix_ref: generated
           ExpressionMatrix object reference report_name: report name
           generated by KBaseReport report_ref: report reference generated by
           KBaseReport) -> structure: parameter "result_directory" of String,
           parameter "diff_expression_obj_ref" of type "obj_ref" (An X/Y/Z
           style reference), parameter "filtered_expression_matrix_ref" of
           type "obj_ref" (An X/Y/Z style reference), parameter "report_name"
           of String, parameter "report_ref" of String
        """
        # ctx is the context object
        # return variables are: returnVal
        #BEGIN run_ballgown_app
        print('>>>>>>>>>>>>>>>>>>>>came here!')
        return ['myResult!']
        #END run_ballgown_app


    def status(self, ctx):
        #BEGIN_STATUS
        returnVal = {'state': "OK",
                     'message': "",
                     'version': self.VERSION,
                     'git_url': self.GIT_URL,
                     'git_commit_hash': self.GIT_COMMIT_HASH}
        #END_STATUS
        return [returnVal]
